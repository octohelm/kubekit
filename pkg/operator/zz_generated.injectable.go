/*
Package operator GENERATED BY gengo:injectable 
DON'T EDIT THIS FILE
*/
package operator

import (
	context "context"
	fmt "fmt"

	kubeclient "github.com/octohelm/kubekit/pkg/kubeclient"
)

func (p *Operator) InjectContext(ctx context.Context) context.Context {

	return ReconcilerRegistryInjectContext(ctx, p)
}

func (v *Operator) Init(ctx context.Context) error {
	if value, ok := kubeclient.ClientFromContext(ctx); ok {
		v.client = value
	} else {
		return fmt.Errorf("missing provider %T.client", v)
	}

	return nil
}

type contextReconcilerRegistry struct{}

func ReconcilerRegistryFromContext(ctx context.Context) (ReconcilerRegistry, bool) {
	if v, ok := ctx.Value(contextReconcilerRegistry{}).(ReconcilerRegistry); ok {
		return v, true
	}
	return nil, false
}

func ReconcilerRegistryInjectContext(ctx context.Context, tpe ReconcilerRegistry) context.Context {
	return context.WithValue(ctx, contextReconcilerRegistry{}, tpe)
}
